# -*- coding: utf-8 -*-
"""NB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_pl672WNoFAuGgjE_GmCG12fZKMwm7AI
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix
import sys

# Step 1: Load the Dataset
df = pd.read_csv("/content/AccidentsBig.csv", low_memory=False)
print("Dataset Loaded Successfully!")
print("Columns in the dataset:\n", df.columns)

# Check if required columns exist
required_columns = ["Road_Type", "Weather_Conditions", "Speed_limit", "Accident_Severity"]
for column in required_columns:
    if column not in df.columns:
        print(f"Column '{column}' not found in the dataset.")
        sys.exit()

# Step 2: Data Preprocessing
print("\nMissing values per column:\n", df[required_columns].isnull().sum())
df = df[required_columns].dropna()  # Drop rows with missing values in selected columns

# Define features
categorical_features = ["Road_Type", "Weather_Conditions"]
numerical_features = ["Speed_limit"]

# Preprocessing pipeline
preprocessor = ColumnTransformer(
    transformers=[
        ("num", StandardScaler(), numerical_features),
        ("cat", OneHotEncoder(handle_unknown='ignore'), categorical_features)
    ]
)

X = df[categorical_features + numerical_features]
y = df["Accident_Severity"]

# Step 3: Train/Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Apply preprocessing
X_train = preprocessor.fit_transform(X_train)
X_test = preprocessor.transform(X_test)

# Step 5: Train Gaussian Naive Bayes Model
model = GaussianNB()
X_train_dense = X_train.toarray() if hasattr(X_train, "toarray") else X_train
model.fit(X_train_dense, y_train)

# Step 6: Predictions
X_test_dense = X_test.toarray() if hasattr(X_test, "toarray") else X_test
y_pred = model.predict(X_test_dense)

# Step 7: Evaluation
print("\nModel Evaluation Metrics:")
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Precision:", precision_score(y_test, y_pred, average='weighted', zero_division=0))
print("Recall:", recall_score(y_test, y_pred, average='weighted', zero_division=0))
print("F1 Score:", f1_score(y_test, y_pred, average='weighted', zero_division=0))

# Step 8: Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6, 4))
sns.heatmap(conf_matrix, annot=True, cmap="Blues", fmt='d')
plt.title("Confusion Matrix of GaussianNB")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.tight_layout()
plt.show()

